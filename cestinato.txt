
void Leftover::allDishesDifferent(std::vector<Couple> &finalPairs, const std::vector<int> &counterVec)
{
    // Ensure that the same leftover is not predicted for both dishes
    if (finalPairs.size() == 2 && checkCouplesEqual(finalPairs[0], finalPairs[1]))
    {

        if (counterVec[0] > counterVec[1])
        {
            for (const cv::Mat &o : originalDishes)
            {
                if (!areSameImage(finalPairs[0].original, o))
                    finalPairs[1].original = o;
            }
            for (const cv::Mat &l : leftoverDishes)
            {
                if (!areSameImage(finalPairs[0].leftover, l))
                    finalPairs[1].leftover = l;
            }
        }
        else if (counterVec[0] < counterVec[1])
        {
            for (const cv::Mat &o : originalDishes)
            {
                if (!areSameImage(finalPairs[1].original, o))
                    finalPairs[0].original = o;
            }
            for (const cv::Mat &l : leftoverDishes)
            {
                if (!areSameImage(finalPairs[1].leftover, l))
                    finalPairs[0].leftover = l;
            }
        }
        else
        {
            int randIndx = rand() % 2;

            for (const cv::Mat &o : originalDishes)
            {

                if (!areSameImage(finalPairs[0].original, o))
                    finalPairs[randIndx].original = o;
            }
            for (const cv::Mat &l : leftoverDishes)
            {
                if (!areSameImage(finalPairs[0].leftover, l))
                    finalPairs[randIndx].leftover = l;
            }
        }
    }
    else if (finalPairs.size() == 3 && (checkCouplesEqual(finalPairs[0], finalPairs[1]) || checkCouplesEqual(finalPairs[0], finalPairs[2]) || checkCouplesEqual(finalPairs[1], finalPairs[2])))
    {
    }
}